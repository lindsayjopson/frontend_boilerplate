// Mixin to add square dimensions to an element i.e. the same width and height 
// Example: Create a square 40em high and wide
// @include tb_square ( 40em );
@mixin tb_square($size) {
	width: $size;
	height: $size;
}

// Mixin to add circle dimensions to an element i.e. adds square dimensions and border-radius of (dimensions / 2)
// Example: Create a circle 40em high and wide
// @include tb_square ( 40em );
@mixin tb_circle($size) {
	@include tb_square($size);
	@include border-radius( $size / 2);
}

@mixin tb_css-triangle ($direction: "down", $size: 20px, $color: #000) {
	width: 0;
	height: 0;
	border-left: $size solid #{tb_setTriangleColor($direction, "left", $color)};
	border-right: $size solid #{tb_setTriangleColor($direction, "right", $color)};
	border-bottom: $size solid #{tb_setTriangleColor($direction, "bottom", $color)};
	border-top: $size solid #{tb_setTriangleColor($direction, "top", $color)};
}

// Reset link color and pseudo states
@mixin tb_link-color ($color) {
	color: $color;
	
	&:visited,
	&:hover,
	&:active {
		color: $color;
	}
}

// Mixin to return the font-size and line-height for a desired size
// Example 1: Generates the font and line-height for the 'alpha' size;
// @include tb_font-size ( $h1-size );
// returns font-size: 2.5em;
// @include tb_font-size ( $h1-size, $h1-line-height );
// returns font-size: 2.5em; line-height: 1.1;
@mixin tb_font-size ($font-size, $line-height-size: false)  {

	font-size: tb_em($font-size);

	@if $line-height-size != false {
		line-height: tb_line-height($line-height-size, $font-size);
	}

}

// Mixin to generate the font size and (optional) line-height
// Example 1: Generates the font and line-height for the 'giga' size;
// @include tb_font-type ( 'giga' );
// returns font-size: 6em; line-height: 1.5;
// Example 2: Generates the font but not the line-height for giga size
// @include tb_font-size ( 'giga', $line-height-size: false );
// returns font-size: 6em;
// Example 3: Generates the font the line-height for default size
// @include tb_font-type ();
// returns font-size: 1em; line-height: 1.5;
@mixin tb_font-type ( $size: false, $line-height-size: true ) {
	@if $size == false {
		@if $line-height-size == true {
			$line-height-size: $base-line-height;
		}
		@include tb_font-size( $base-font-size, $line-height-size: $line-height-size );
	} @else if $size == 'giga' {
		@if $line-height-size == true {
			$line-height-size: $giga-line-height;
		}
		@include tb_font-size( $giga-size, $line-height-size: $line-height-size );
	} @else if $size == 'mega' {
		@if $line-height-size == true {
			$line-height-size: $mega-line-height;
		}
		@include tb_font-size( $mega-size, $line-height-size: $line-height-size );
	} @else if $size == 'kilo' {
		@if $line-height-size == true {
			$line-height-size: $kilo-line-height;
		}
		@include tb_font-size( $kilo-size, $line-height-size: $line-height-size );
	} @else if $size == 'h1' or $size == 'alpha' {
		@if $line-height-size == true {
			$line-height-size: $h1-line-height;
		}
		@include tb_font-size( $h1-size, $line-height-size: $line-height-size );
	} @else if $size == 'h2' or $size == 'beta'{
		@if $line-height-size == true {
			$line-height-size: $h2-line-height;
		}
		@include tb_font-size( $h2-size, $line-height-size: $line-height-size );
	} @else if $size == 'h3' or $size == 'gamma'{
		@if $line-height-size == true {
			$line-height-size: $h3-line-height;
		}
		@include tb_font-size( $h3-size, $line-height-size: $line-height-size);
	} @else if $size == 'h4'  or $size == 'delta'{
		@if $line-height-size == true {
			$line-height-size: $h4-line-height;
		}
		@include tb_font-size( $h4-size, $line-height-size: $line-height-size );
	} @else if $size == 'h5' or $size == 'epsilon' {
		@if $line-height-size == true {
			$line-height-size: $h5-line-height;
		}
		@include tb_font-size( $h5-size, $line-height-size: $line-height-size );
	} @else if $size == 'h6'  or $size == 'zeta' {
		@if $line-height-size == true {
			$line-height-size: $h6-line-height;
		}
		@include tb_font-size( $h6-size, $line-height-size: $line-height-size );
	} @else if $size == 'milli'or $size == 'smallprint'  {
		@if $line-height-size == true {
			$line-height-size: $milli-line-height;
		}
		@include tb_font-size( $milli-size, $line-height-size: $line-height-size );
	} @else if $size == 'micro' {
		@if $line-height-size == true {
			$line-height-size: $micro-line-height;
		}
		@include tb_font-size( $micro-size, $line-height-size: $line-height-size );
	}
}


// Mixin to output nav css (based on code in inuit.css/objects/_nav.scss). Useful in
// responsive sites as you cannot use @extend within mediaqueries.
// Example 1: Generates the CSS for the default nav.
// @include tb_nav();
// Example 2: Generates the CSS for the `.stacked` nav.
// @include tb_nav('stacked');
@mixin tb_nav($type: 'nav') {
	@if $type == 'nav' {
		list-style:none;
		margin-left:0;
		@include pie-clearfix();

		> li{

			&,
			> a{
				display:inline-block;
				*display:inline;
				zoom:1;
			}
		}
	} @else if $type == 'stacked' {
		> li{
			display:list-item;

			> a{
				display:block;
			}
		}
	} @else if $type == 'banner' {
		text-align:center;
	} @else if $type == 'block' {
		line-height:1;
		/**
		* Remove whitespace caused by `inline-block`.
		*/
		letter-spacing:-0.31em;
		word-spacing:-0.43em;
		white-space:nowrap;

		> li{
			letter-spacing:normal;
			word-spacing:normal;

			> a{
				padding:$half-spacing-unit;
			}
		}
	} @else if $type == 'fit' {
		display:table;
		width:100%;

		> li{
			display:table-cell;

			> a{
				display:block;
			}
		}
	} @else if $type == 'keywords' {
		> li{

			&:after{
				content:"\002C" "\00A0";
			}

			&:last-child:after{
				display:none;
			}
		}
	} @else if $type == 'tree' {
		&,
		ul{
			margin-left: 0;
			list-style: none;
		}
		li {
			display: list-item;
		}
		a {
			display: block;
		}
		// Nav Sub Levels
		.nav--tree__level-1 {}
		.nav--tree__level-2 {
			padding-left: $base-spacing-unit * 1;
		}
		.nav--tree__level-3 {
			padding-left: $base-spacing-unit * 2;
		}
		.nav--tree__level-4 {
			padding-left: $base-spacing-unit * 3;
		}
	}
}